 In this lesson, we'll see how to extract elements from a vector based on some conditions that we
| specify.

...

  |==                                                                                           |   3%

| For example, we may only be interested in the first 20 elements of a vector, or only the elements
| that are not NA, or only those that are positive or correspond to a specific variable of interest.
| By the end of this lesson, you'll know how to handle each of these scenarios.

...

  |=====                                                                                        |   5%

| I've created for you a vector called x that contains a random ordering of 20 numbers (from a
| standard normal distribution) and 20 NAs. Type x now to see what it looks like.

> x
 [1] -0.80192813  0.62463185  1.74584724  0.99653759 -1.91561277          NA          NA  0.39249210
 [9]          NA          NA -1.00614140  0.80338015 -1.12175725 -0.76475671 -0.66131015 -0.79897434
[17]          NA          NA -0.31756044  0.15157509          NA  0.50986140  1.44823301          NA
[25]          NA          NA          NA          NA -0.12100571          NA -1.51226254          NA
[33]          NA          NA          NA          NA -0.08323847          NA          NA -0.61006842

| You're the best!

  |=======                                                                                      |   8%

| The way you tell R that you want to select some particular elements (i.e. a 'subset') from a vector
| is by placing an 'index vector' in square brackets immediately following the name of the vector.

...

  |==========                                                                                   |  10%

| For a simple example, try x[1:10] to view the first ten elements of x.

> x[1:10]
 [1] -0.8019281  0.6246318  1.7458472  0.9965376 -1.9156128         NA         NA  0.3924921         NA
[10]         NA

| Nice work!

  |============                                                                                 |  13%

| Index vectors come in four different flavors -- logical vectors, vectors of positive integers,
| vectors of negative integers, and vectors of character strings -- each of which we'll cover in this
| lesson.

...

  |==============                                                                               |  15%

| Let's start by indexing with logical vectors. One common scenario when working with real-world data
| is that we want to extract all elements of a vector that are not NA (i.e. missing data). Recall that
| is.na(x) yields a vector of logical values the same length as x, with TRUEs corresponding to NA
| values in x and FALSEs corresponding to non-NA values in x.

...

  |=================                                                                            |  18%

| What do you think x[is.na(x)] will give you?

1: A vector with no NAs
2: A vector of all NAs
3: A vector of TRUEs and FALSEs
4: A vector of length 0

Selection: 3

| Give it another try.

| Remember that is.na(x) tells us where the NAs are in a vector. So if we subset x based on that, what
| do you expect to happen?

1: A vector of length 0
2: A vector with no NAs
3: A vector of TRUEs and FALSEs
4: A vector of all NAs

Selection: 2

| Keep trying!

| Remember that is.na(x) tells us where the NAs are in a vector. So if we subset x based on that, what
| do you expect to happen?

1: A vector of length 0
2: A vector with no NAs
3: A vector of all NAs
4: A vector of TRUEs and FALSEs

Selection: 3

| You're the best!

  |===================                                                                          |  21%

| Prove it to yourself by typing x[is.na(x)].

> x[is.na(x)]
 [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

| Perseverance, that's the answer.

  |=====================                                                                        |  23%

| Recall that `!` gives us the negation of a logical expression, so !is.na(x) can be read as 'is not
| NA'. Therefore, if we want to create a vector called y that contains all of the non-NA values from
| x, we can use y <- x[!is.na(x)]. Give it a try.

> y<-x[!is.na(x)]

| You are amazing!

  |========================                                                                     |  26%

| Print y to the console.

> y
 [1] -0.80192813  0.62463185  1.74584724  0.99653759 -1.91561277  0.39249210 -1.00614140  0.80338015
 [9] -1.12175725 -0.76475671 -0.66131015 -0.79897434 -0.31756044  0.15157509  0.50986140  1.44823301
[17] -0.12100571 -1.51226254 -0.08323847 -0.61006842

| Excellent work!

  |==========================                                                                   |  28%

| Now that we've isolated the non-missing values of x and put them in y, we can subset y as we please.

...

  |=============================                                                                |  31%

| Recall that the expression y > 0 will give us a vector of logical values the same length as y, with
| TRUEs corresponding to values of y that are greater than zero and FALSEs corresponding to values of
| y that are less than or equal to zero. What do you think y[y > 0] will give you?

1: A vector of all the positive elements of y
2: A vector of TRUEs and FALSEs
3: A vector of length 0
4: A vector of all the negative elements of y
5: A vector of all NAs

Selection: 1

| You are quite good my friend!

  |===============================                                                              |  33%

| Type y[y > 0] to see that we get all of the positive elements of y, which are also the positive
| elements of our original vector x.

> y[y>0]
[1] 0.6246318 1.7458472 0.9965376 0.3924921 0.8033801 0.1515751 0.5098614 1.4482330

| You are really on a roll!

  |=================================                                                            |  36%

| You might wonder why we didn't just start with x[x > 0] to isolate the positive elements of x. Try
| that now to see why.

> x[x>0]
 [1] 0.6246318 1.7458472 0.9965376        NA        NA 0.3924921        NA        NA 0.8033801
[10]        NA        NA 0.1515751        NA 0.5098614 1.4482330        NA        NA        NA
[19]        NA        NA        NA        NA        NA        NA        NA        NA        NA
[28]        NA

| You're the best!

  |====================================                                                         |  38%

| Since NA is not a value, but rather a placeholder for an unknown quantity, the expression NA > 0
| evaluates to NA. Hence we get a bunch of NAs mixed in with our positive numbers when we do this.

...

  |======================================                                                       |  41%

| Combining our knowledge of logical operators with our new knowledge of subsetting, we could do this
| -- x[!is.na(x) & x > 0]. Try it out.

> x[!is.na(x)&x>0]
[1] 0.6246318 1.7458472 0.9965376 0.3924921 0.8033801 0.1515751 0.5098614 1.4482330

| Great job!

  |=========================================                                                    |  44%

| In this case, we request only values of x that are both non-missing AND greater than zero.

...

  |===========================================                                                  |  46%

| I've already shown you how to subset just the first ten values of x using x[1:10]. In this case,
| we're providing a vector of positive integers inside of the square brackets, which tells R to return
| only the elements of x numbered 1 through 10.

...

  |=============================================                                                |  49%

| Many programming languages use what's called 'zero-based indexing', which means that the first
| element of a vector is considered element 0. R uses 'one-based indexing', which (you guessed it!)
| means the first element of a vector is considered element 1.

...

  |================================================                                             |  51%

| Can you figure out how we'd subset the 3rd, 5th, and 7th elements of x? Hint -- Use the c() function
| to specify the element numbers as a numeric vector.

> x[c(3,5,7)]
[1]  1.745847 -1.915613        NA

| You nailed it! Good job!

  |==================================================                                           |  54%

| It's important that when using integer vectors to subset our vector x, we stick with the set of
| indexes {1, 2, ..., 40} since x only has 40 elements. What happens if we ask for the zeroth element
| of x (i.e. x[0])? Give it a try.

> x[0]
numeric(0)

| Excellent work!

  |====================================================                                         |  56%

| As you might expect, we get nothing useful. Unfortunately, R doesn't prevent us from doing this.
| What if we ask for the 3000th element of x? Try it out.

> x[3000]
[1] NA

| You are really on a roll!

  |=======================================================                                      |  59%

| Again, nothing useful, but R doesn't prevent us from asking for it. This should be a cautionary
| tale. You should always make sure that what you are asking for is within the bounds of the vector
| you're working with.

...

  |=========================================================                                    |  62%

| What if we're interested in all elements of x EXCEPT the 2nd and 10th? It would be pretty tedious to
| construct a vector containing all numbers 1 through 40 EXCEPT 2 and 10.

...

  |============================================================                                 |  64%

| Luckily, R accepts negative integer indexes. Whereas x[c(2, 10)] gives us ONLY the 2nd and 10th
| elements of x, x[c(-2, -10)] gives us all elements of x EXCEPT for the 2nd and 10 elements.  Try
| x[c(-2, -10)] now to see this.

> x[c(-2,-10)]
 [1] -0.80192813  1.74584724  0.99653759 -1.91561277          NA          NA  0.39249210          NA
 [9] -1.00614140  0.80338015 -1.12175725 -0.76475671 -0.66131015 -0.79897434          NA          NA
[17] -0.31756044  0.15157509          NA  0.50986140  1.44823301          NA          NA          NA
[25]          NA          NA -0.12100571          NA -1.51226254          NA          NA          NA
[33]          NA          NA -0.08323847          NA          NA -0.61006842

| You are doing so well!

  |==============================================================                               |  67%

| A shorthand way of specifying multiple negative numbers is to put the negative sign out in front of
| the vector of positive numbers. Type x[-c(2, 10)] to get the exact same result.

> x[-c(2, 10)]
 [1] -0.80192813  1.74584724  0.99653759 -1.91561277          NA          NA  0.39249210          NA
 [9] -1.00614140  0.80338015 -1.12175725 -0.76475671 -0.66131015 -0.79897434          NA          NA
[17] -0.31756044  0.15157509          NA  0.50986140  1.44823301          NA          NA          NA
[25]          NA          NA -0.12100571          NA -1.51226254          NA          NA          NA
[33]          NA          NA -0.08323847          NA          NA -0.61006842

| You are amazing!

  |================================================================                             |  69%

| So far, we've covered three types of index vectors -- logical, positive integer, and negative
| integer. The only remaining type requires us to introduce the concept of 'named' elements.

...

  |===================================================================                          |  72%

| Create a numeric vector with three named elements using vect <- c(foo = 11, bar = 2, norf = NA).

> vect<-c(foo=11,bar=2,norf=NA)

| All that hard work is paying off!

  |=====================================================================                        |  74%

| When we print vect to the console, you'll see that each element has a name. Try it out.

> vect
 foo  bar norf 
  11    2   NA 

| Keep up the great work!

  |========================================================================                     |  77%

| We can also get the names of vect by passing vect as an argument to the names() function. Give that
| a try.

> names(vect)
[1] "foo"  "bar"  "norf"

| You are amazing!

  |==========================================================================                   |  79%

| Alternatively, we can create an unnamed vector vect2 with c(11, 2, NA). Do that now.

> vect2<-c(11,2,NA)

| That's correct!

  |============================================================================                 |  82%

| Then, we can add the `names` attribute to vect2 after the fact with names(vect2) <- c("foo", "bar",
| "norf"). Go ahead.

> names(vect2)<-c("foo","bar","norf")

| That's the answer I was looking for.

  |===============================================================================              |  85%

| Now, let's check that vect and vect2 are the same by passing them as arguments to the identical()
| function.

> identical(vect,vect)
[1] TRUE

| Keep trying! Or, type info() for more options.

| The identical() function tells us if its first two arguments are, well, identical.

> identical(vect,vect2)
[1] TRUE

| You got it!

  |=================================================================================            |  87%

| Indeed, vect and vect2 are identical named vectors.

...

  |===================================================================================          |  90%

| Now, back to the matter of subsetting a vector by named elements. Which of the following commands do
| you think would give us the second element of vect?

1: vect[bar]
2: vect["bar"]
3: vect["2"]

Selection: 1

| Not quite right, but keep trying.

| If we want the element named "bar" (i.e. the second element of vect), which command would get us
| that?

1: vect[bar]
2: vect["2"]
3: vect["bar"]

Selection: 2

| Try again. Getting it right on the first try is boring anyway!

| If we want the element named "bar" (i.e. the second element of vect), which command would get us
| that?

1: vect["2"]
2: vect["bar"]
3: vect[bar]

Selection: 2

| Excellent work!

  |======================================================================================       |  92%

| Now, try it out.

> vect["bar"]
bar 
  2 

| Great job!

  |========================================================================================     |  95%

| Likewise, we can specify a vector of names with vect[c("foo", "bar")]. Try it out.

> vect[c("foo","bar")]
foo bar 
 11   2 

| Your dedication is inspiring!

  |===========================================================================================  |  97%

| Now you know all four methods of subsetting data from vectors. Different approaches are best in
| different scenarios and when in doubt, try it out!

...

  |=============================================================================================| 100%

| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 1
What is your email address? tanishnoah@gmail.com
What is your assignment token? 42fx4LAFeATxONb8
Grade submission succeeded!

| Keep up the great work!

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers    
 4: Vectors                    5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                      9: Functions               
10: lapply and sapply         11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times           15: Base Graphics           


Selection: 7

  |                                                                                             |   0%

| In this lesson, we'll cover matrices and data frames. Both represent 'rectangular' data types,
| meaning that they are used to store tabular data, with rows and columns.

...

  |===                                                                                          |   3%

| The main difference, as you'll see, is that matrices can only contain a single class of data, while
| data frames can consist of many different classes of data.

...

  |=====                                                                                        |   6%

| Let's create a vector containing the numbers 1 through 20 using the `:` operator. Store the result
| in a variable called my_vector.

> 
> my_vector<-1;20

| Not quite, but you're learning! Try again. Or, type info() for more options.

| You learned about the `:` operator in the lesson on sequences. If you wanted to create a vector
| containing the numbers 1, 2, and 3 (in that order), you could use either c(1, 2, 3) or 1:3. In this
| case, we want the numbers 1 through 20 stored in a variable called my_vector. Also, remember that
| you don't need the c() function when using `:`.

[1] 20

| Not quite! Try again. Or, type info() for more options.

| You learned about the `:` operator in the lesson on sequences. If you wanted to create a vector
| containing the numbers 1, 2, and 3 (in that order), you could use either c(1, 2, 3) or 1:3. In this
| case, we want the numbers 1 through 20 stored in a variable called my_vector. Also, remember that
| you don't need the c() function when using `:`.

> my_vector<-1:20

| Your dedication is inspiring!

  |========                                                                                     |   8%

| View the contents of the vector you just created.

> my_vecor
Error: object 'my_vecor' not found
> my_vector
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| You are amazing!

  |==========                                                                                   |  11%

| The dim() function tells us the 'dimensions' of an object. What happens if we do dim(my_vector)?
| Give it a try.

> dim(my_vector)
NULL

| Excellent work!

  |=============                                                                                |  14%

| Clearly, that's not very helpful! Since my_vector is a vector, it doesn't have a `dim` attribute (so
| it's just NULL), but we can find its length using the length() function. Try that now.

> length(my_vector)
[1] 20

| You're the best!

  |================                                                                             |  17%

| Ah! That's what we wanted. But, what happens if we give my_vector a `dim` attribute? Let's give it a
| try. Type dim(my_vector) <- c(4, 5).

> dim(my_vector)<-c(4,5)

| You are really on a roll!

  |==================                                                                           |  19%

| It's okay if that last command seemed a little strange to you. It should! The dim() function allows
| you to get OR set the `dim` attribute for an R object. In this case, we assigned the value c(4, 5)
| to the `dim` attribute of my_vector.

...

  |=====================                                                                        |  22%

| Use dim(my_vector) to confirm that we've set the `dim` attribute correctly.

> dim(my_vector)
[1] 4 5

| Excellent work!

  |=======================                                                                      |  25%

| Another way to see this is by calling the attributes() function on my_vector. Try it now.

> attributes(my_vector)
$dim
[1] 4 5


| You are really on a roll!

  |==========================                                                                   |  28%

| Just like in math class, when dealing with a 2-dimensional object (think rectangular table), the
| first number is the number of rows and the second is the number of columns. Therefore, we just gave
| my_vector 4 rows and 5 columns.

...

  |============================                                                                 |  31%

| But, wait! That doesn't sound like a vector any more. Well, it's not. Now it's a matrix. View the
| contents of my_vector now to see what it looks like.

> my_vector
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20

| That's correct!

  |===============================                                                              |  33%

| Now, let's confirm it's actually a matrix by using the class() function. Type class(my_vector) to
| see what I mean.

> class(my_vector)
[1] "matrix"

| All that hard work is paying off!

  |==================================                                                           |  36%

| Sure enough, my_vector is now a matrix. We should store it in a new variable that helps us remember
| what it is. Store the value of my_vector in a new variable called my_matrix.

> my_matrix<-my_vector

| That's a job well done!

  |====================================                                                         |  39%

| The example that we've used so far was meant to illustrate the point that a matrix is simply an
| atomic vector with a dimension attribute. A more direct method of creating the same matrix uses the
| matrix() function.

...

  |=======================================                                                      |  42%

| Bring up the help file for the matrix() function now using the `?` function.

> ?matrix

| Great job!

  |=========================================                                                    |  44%

| Now, look at the documentation for the matrix function and see if you can figure out how to create a
| matrix containing the same numbers (1-20) and dimensions (4 rows, 5 columns) by calling the matrix()
| function. Store the result in a variable called my_matrix2.

> matrix(1:20,nrow=4,ncolumns=5)
Error in matrix(1:20, nrow = 4, ncolumns = 5) : 
  unused argument (ncolumns = 5)
> matrix(1:20,nrow=4,ncol=5)
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20

| One more time. You can do it! Or, type info() for more options.

| Call the matrix() function with three arguments -- 1:20, the number of rows, and the number of
| columns. Be sure to specify arguments by their proper names and store the result in my_matrix2 (not
| in my_matrix).

> my_matrix2<-matrix(1:20,nrow=4,ncol=5)

| You got it right!

  |============================================                                                 |  47%

| Finally, let's confirm that my_matrix and my_matrix2 are actually identical. The identical()
| function will tell us if its first two arguments are the same. Try it out.

> identical(my_matrix,my_matrix2)
[1] TRUE

| Excellent job!

  |==============================================                                               |  50%

| Now, imagine that the numbers in our table represent some measurements from a clinical experiment,
| where each row represents one patient and each column represents one variable for which measurements
| were taken.

...

  |=================================================                                            |  53%

| We may want to label the rows, so that we know which numbers belong to each patient in the
| experiment. One way to do this is to add a column to the matrix, which contains the names of all
| four people.

...

  |====================================================                                         |  56%

| Let's start by creating a character vector containing the names of our patients -- Bill, Gina,
| Kelly, and Sean. Remember that double quotes tell R that something is a character string. Store the
| result in a variable called patients.

> patients<-c("Bill","Gina","Kelly","Sean")

| You are doing so well!

  |======================================================                                       |  58%

| Now we'll use the cbind() function to 'combine columns'. Don't worry about storing the result in a
| new variable. Just call cbind() with two arguments -- the patients vector and my_matrix.

> cbind(patients,my_matrix)
     patients                       
[1,] "Bill"   "1" "5" "9"  "13" "17"
[2,] "Gina"   "2" "6" "10" "14" "18"
[3,] "Kelly"  "3" "7" "11" "15" "19"
[4,] "Sean"   "4" "8" "12" "16" "20"

| You nailed it! Good job!

  |=========================================================                                    |  61%

| Something is fishy about our result! It appears that combining the character vector with our matrix
| of numbers caused everything to be enclosed in double quotes. This means we're left with a matrix of
| character strings, which is no good.

...

  |===========================================================                                  |  64%

| If you remember back to the beginning of this lesson, I told you that matrices can only contain ONE
| class of data. Therefore, when we tried to combine a character vector with a numeric matrix, R was
| forced to 'coerce' the numbers to characters, hence the double quotes.

...

  |==============================================================                               |  67%

| This is called 'implicit coercion', because we didn't ask for it. It just happened. But why didn't R
| just convert the names of our patients to numbers? I'll let you ponder that question on your own.

...

  |=================================================================                            |  69%

| So, we're still left with the question of how to include the names of our patients in the table
| without destroying the integrity of our numeric data. Try the following -- my_data <-
| data.frame(patients, my_matrix)

> my_data<-data.frame(patients,my_matrix)

| That's correct!

  |===================================================================                          |  72%

| Now view the contents of my_data to see what we've come up with.

> my_data
  patients X1 X2 X3 X4 X5
1     Bill  1  5  9 13 17
2     Gina  2  6 10 14 18
3    Kelly  3  7 11 15 19
4     Sean  4  8 12 16 20

| You're the best!

  |======================================================================                       |  75%

| It looks like the data.frame() function allowed us to store our character vector of names right
| alongside our matrix of numbers. That's exactly what we were hoping for!

...

  |========================================================================                     |  78%

| Behind the scenes, the data.frame() function takes any number of arguments and returns a single
| object of class `data.frame` that is composed of the original objects.

...

  |===========================================================================                  |  81%

| Let's confirm this by calling the class() function on our newly created data frame.

> class(my_data)
[1] "data.frame"

| Excellent job!

  |==============================================================================               |  83%

| It's also possible to assign names to the individual rows and columns of a data frame, which
| presents another possible way of determining which row of values in our table belongs to each
| patient.

...

  |================================================================================             |  86%

| However, since we've already solved that problem, let's solve a different problem by assigning names
| to the columns of our data frame so that we know what type of measurement each column represents.

...

  |===================================================================================          |  89%

| Since we have six columns (including patient names), we'll need to first create a vector containing
| one element for each column. Create a character vector called cnames that contains the following
| values (in order) -- "patient", "age", "weight", "bp", "rating", "test".

> cnames<-c("patient","age","weight","bp","rating","test")

| You are quite good my friend!

  |=====================================================================================        |  92%

| Now, use the colnames() function to set the `colnames` attribute for our data frame. This is similar
| to the way we used the dim() function earlier in this lesson.

> colnames(my_data)
[1] "patients" "X1"       "X2"       "X3"       "X4"       "X5"      

| Almost! Try again. Or, type info() for more options.

| Try colnames(my_data) <- cnames.

> colnames(my_data)<-cnames

| You're the best!

  |========================================================================================     |  94%

| Let's see if that got the job done. Print the contents of my_data.

> my_data
  patient age weight bp rating test
1    Bill   1      5  9     13   17
2    Gina   2      6 10     14   18
3   Kelly   3      7 11     15   19
4    Sean   4      8 12     16   20

| That's the answer I was looking for.

  |==========================================================================================   |  97%

| In this lesson, you learned the basics of working with two very important and common data structures
| -- matrices and data frames. There's much more to learn and we'll be covering more advanced topics,
| particularly with respect to data frames, in future lessons.

...

  |=============================================================================================| 100%

| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 1
What is your email address? tanishnoah@gmail.com
What is your assignment token? ux1zJtDuCSV2lw93
Grade submission succeeded!

| All that hard work is paying off!

| You've reached the end of this lesson! Returning to the main menu...
